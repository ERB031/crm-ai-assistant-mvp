// prisma/schema.prisma

// ---------- Generator ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Datasource ----------
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (PgBouncer) URL
  directUrl = env("DIRECT_URL")   // direct 5432 URL for migrations
}

// ---------- Enums ----------
enum DealStage {
  LEAD
  QUALIFIED
  PROPOSAL
  WON
  LOST
}

// ---------- Models ----------
model Client {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  birthday  DateTime?
  stage     DealStage @default(LEAD)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  projects Project[]
  notes    Note[]

  @@unique([name])
}

model Project {
  id        String   @id @default(uuid())
  clientId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Restrict)
  tasks  Task[]
  notes  Note[]

  @@index([clientId])
}

model Task {
  id        String   @id @default(uuid())
  projectId String
  title     String
  done      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Restrict)

  @@index([projectId])
}

model Note {
  id        String   @id @default(uuid())
  clientId  String
  projectId String?
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client  Client   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([projectId])
}
